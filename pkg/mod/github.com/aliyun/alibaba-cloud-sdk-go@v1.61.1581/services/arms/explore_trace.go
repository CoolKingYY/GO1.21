package arms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ExploreTrace invokes the arms.ExploreTrace API synchronously
func (client *Client) ExploreTrace(request *ExploreTraceRequest) (response *ExploreTraceResponse, err error) {
	response = CreateExploreTraceResponse()
	err = client.DoAction(request, response)
	return
}

// ExploreTraceWithChan invokes the arms.ExploreTrace API asynchronously
func (client *Client) ExploreTraceWithChan(request *ExploreTraceRequest) (<-chan *ExploreTraceResponse, <-chan error) {
	responseChan := make(chan *ExploreTraceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ExploreTrace(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ExploreTraceWithCallback invokes the arms.ExploreTrace API asynchronously
func (client *Client) ExploreTraceWithCallback(request *ExploreTraceRequest, callback func(response *ExploreTraceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ExploreTraceResponse
		var err error
		defer close(result)
		response, err = client.ExploreTrace(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ExploreTraceRequest is the request struct for api ExploreTrace
type ExploreTraceRequest struct {
	*requests.RpcRequest
	TraceId       string                    `position:"Query" name:"TraceId"`
	Kind          string                    `position:"Query" name:"Kind"`
	EndTime       requests.Integer          `position:"Query" name:"EndTime"`
	StartTime     requests.Integer          `position:"Query" name:"StartTime"`
	MinDuration   requests.Integer          `position:"Query" name:"MinDuration"`
	SelectedField string                    `position:"Query" name:"SelectedField"`
	ServiceIp     string                    `position:"Query" name:"ServiceIp"`
	StatusCode    string                    `position:"Query" name:"StatusCode"`
	MaxDuration   requests.Integer          `position:"Query" name:"MaxDuration"`
	PageSize      requests.Integer          `position:"Query" name:"PageSize"`
	ServiceName   string                    `position:"Query" name:"ServiceName"`
	Attributes    *[]ExploreTraceAttributes `position:"Query" name:"Attributes"  type:"Repeated"`
	Page          requests.Integer          `position:"Query" name:"Page"`
	SpanName      string                    `position:"Query" name:"SpanName"`
}

// ExploreTraceAttributes is a repeated param struct in ExploreTraceRequest
type ExploreTraceAttributes struct {
	Value    string `name:"Value"`
	Key      string `name:"Key"`
	Operator string `name:"Operator"`
}

// ExploreTraceResponse is the response struct for api ExploreTrace
type ExploreTraceResponse struct {
	*responses.BaseResponse
	RequestId string   `json:"RequestId" xml:"RequestId"`
	SpanVOs   []SpanVO `json:"SpanVOs" xml:"SpanVOs"`
}

// CreateExploreTraceRequest creates a request to invoke ExploreTrace API
func CreateExploreTraceRequest() (request *ExploreTraceRequest) {
	request = &ExploreTraceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ARMS", "2019-08-08", "ExploreTrace", "", "")
	request.Method = requests.POST
	return
}

// CreateExploreTraceResponse creates a response to parse from ExploreTrace response
func CreateExploreTraceResponse() (response *ExploreTraceResponse) {
	response = &ExploreTraceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
